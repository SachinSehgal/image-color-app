{"version":3,"sources":["Canavas.js","Button.js","App.js","reportWebVitals.js","index.js"],"names":["Canavas","uniqueNumbers","canvas","useRef","ctx","drawFillRect","info","style","x","y","w","h","backgroundColor","current","beginPath","fillStyle","fillRect","useEffect","canvasEle","width","height","context","getContext","data","count","xAxis","yAxis","i","length","j","k","generateColor","ref","Button","setUniqueNumbersArray","generateUniqueNumbers","uniqueNumberSet","Set","counter","size","add","Math","floor","random","Array","from","className","onClick","App","useState","uniqueNumbersArray","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA6DeA,EA3DC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACXC,EAASC,iBAAO,MAChBC,EAAMD,iBAAO,MAGbE,EAAe,SAACC,EAAMC,GAAW,IAC7BC,EAAeF,EAAfE,EAAGC,EAAYH,EAAZG,EAAGC,EAASJ,EAATI,EAAGC,EAAML,EAANK,EACTC,EAAoBL,EAApBK,gBAERR,EAAIS,QAAQC,YACZV,EAAIS,QAAQE,UAAYH,EACxBR,EAAIS,QAAQG,SAASR,EAAGC,EAAGC,EAAGC,IAIhCM,qBAAU,WACR,IAAMC,EAAYhB,EAAOW,QACzBK,EAAUC,MAAQ,MAClBD,EAAUE,OAAS,MAGnB,IAAMC,EAAUH,EAAUI,WAAW,MACrClB,EAAIS,QAAUQ,IACb,IAiCH,OAJAJ,qBAAU,YA1BY,SAACM,GAIrB,IAHA,IAAIC,EAAQ,EACRC,EAAQ,EACRC,EAAQ,EACHC,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAC/B,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAKK,OAAQC,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAKK,OAAQE,IAC/BN,IACAnB,EACE,CAAEG,EAAW,EAARiB,EAAWhB,EAAGiB,EAAOhB,EAAG,EAAGC,EAAG,GACnC,CACEC,gBAAgB,OAAD,OAASW,EAAKO,GAAd,YAAoBP,EAAKM,GAAzB,YAA+BN,EAAKI,GAApC,OAGnBF,IAGID,EAAQ,MAAQ,IAClBE,GAAgB,EAChBD,EAAQ,GAQhBM,CAAc9B,KACb,CAACA,IAEG,wBAAQ+B,IAAK9B,K,OC1BP+B,EA9BA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,sBAGVC,EAAwB,WAO5B,IAJA,IAAMC,EAAkB,IAAIC,IACxBC,EAAU,EAGPF,EAAgBG,MAAQ,IAC7BH,EAAgBI,IAAIC,KAAKC,MAAMD,KAAKE,UAAsB,EAAVL,KAChDA,IAGFJ,EAAsB,YAAIU,MAAMC,KAAKT,MAQvC,OAJAnB,qBAAU,WACRkB,MACC,IAGD,wBAAQW,UAAU,MAAMC,QAAS,kBAAMZ,KAAvC,gC,MCVWa,MAXf,WAAgB,IAAD,EACuCC,mBAAS,IADhD,mBACNC,EADM,KACchB,EADd,KAGb,OACE,sBAAKY,UAAU,MAAf,UACE,cAAC,EAAD,CAAQZ,sBAAuBA,IAC9BgB,GAAsB,cAAC,EAAD,CAASjD,cAAeiD,QCCtCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b476c475.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\n\r\nconst Canavas = ({ uniqueNumbers }) => {\r\n  const canvas = useRef(null);\r\n  const ctx = useRef(null);\r\n\r\n  // draw pixel with background\r\n  const drawFillRect = (info, style) => {\r\n    const { x, y, w, h } = info;\r\n    const { backgroundColor } = style;\r\n\r\n    ctx.current.beginPath();\r\n    ctx.current.fillStyle = backgroundColor;\r\n    ctx.current.fillRect(x, y, w, h);\r\n  };\r\n\r\n  // initialize the canvas\r\n  useEffect(() => {\r\n    const canvasEle = canvas.current;\r\n    canvasEle.width = \"256\";\r\n    canvasEle.height = \"128\";\r\n\r\n    // get context of the canvas and set it i the ctx ref\r\n    const context = canvasEle.getContext(\"2d\");\r\n    ctx.current = context;\r\n  }, []);\r\n\r\n  // generate colors\r\n  const generateColor = (data) => {\r\n    let count = 0;\r\n    let xAxis = 0;\r\n    let yAxis = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n      for (let j = 0; j < data.length; j++) {\r\n        for (let k = 0; k < data.length; k++) {\r\n          count++;\r\n          drawFillRect(\r\n            { x: xAxis * 1, y: yAxis, w: 1, h: 1 },\r\n            {\r\n              backgroundColor: `rgb(${data[k]},${data[j]},${data[i]})`,\r\n            }\r\n          );\r\n          xAxis++;\r\n\r\n          // logic to wrap the pixels to next line\r\n          if (count % 256 === 0) {\r\n            yAxis = yAxis + 1;\r\n            xAxis = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateColor(uniqueNumbers);\r\n  }, [uniqueNumbers]);\r\n\r\n  return <canvas ref={canvas}></canvas>;\r\n};\r\n\r\nexport default Canavas;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst Button = ({ setUniqueNumbersArray }) => {\r\n\r\n  // generate Unique Numbers function\r\n  const generateUniqueNumbers = () => {\r\n\r\n    // variables\r\n    const uniqueNumberSet = new Set();\r\n    let counter = 1;\r\n\r\n    // generate unique numbers\r\n    while (uniqueNumberSet.size <= 31) {\r\n      uniqueNumberSet.add(Math.floor(Math.random() * (counter * 8)));\r\n      counter++;\r\n    }\r\n\r\n    setUniqueNumbersArray([...Array.from(uniqueNumberSet)]);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    generateUniqueNumbers();\r\n  }, []);\r\n\r\n  return (\r\n    <button className=\"btn\" onClick={() => generateUniqueNumbers()}>\r\n      Regenerate Colors\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\nimport Canavas from \"./Canavas\";\nimport Button from \"./Button\";\nimport \"./App.css\";\n\nfunction App() {\n  const [uniqueNumbersArray, setUniqueNumbersArray] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Button setUniqueNumbersArray={setUniqueNumbersArray} />\n      {uniqueNumbersArray && <Canavas uniqueNumbers={uniqueNumbersArray} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}